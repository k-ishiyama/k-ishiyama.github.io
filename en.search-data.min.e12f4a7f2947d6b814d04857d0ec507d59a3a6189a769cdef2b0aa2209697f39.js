'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/posts/202212_advent_calendar/','title':"Walk on Spheres について",'section':"Blog",'content':"これは レイトレ Advent Calendar 2022 の記事です.\nはじめに #  透明な容器に薄めた牛乳を入れ, 懐中電灯で照らすことで簡易ランタンを作る技があります.\n    ぼんやりと光る牛乳をパストレーシングで描きたいとき, 単純にはランダムウォークする経路に沿って, ボリュームレンダリング方程式を評価することが考えられます. それほど計算コストをかけたくない場合は, ボリュームレンダリング方程式の拡散近似から, てきとうな近似式を作ることがあるかもしれません.\n光に限らず, 熱や電荷など何かが媒質の中に拡散する現象はありふれたものです. 一般の拡散現象に応用できるような, ランダムウォークと 拡散方程式を対応付ける基盤として, Feynman-Kac の公式が知られています [ 江沢 and 中村. 2020].\n今年, Feynman-Kac の公式とボリュームレンダリング方程式の類似性から, ボリュームレンダリングの手法 [ Novák et al. 2018] を応用することによって, 空間的に非一様な係数を持った 楕円型偏微分方程式を効率よく解く手法が提案されました [ Sawhney et al. 2022]\nこの記事では, 楕円型偏微分方程式の最も簡単な場合である Laplace 方程式を取り上げ, その手法の基礎となる Walk on Spheres アルゴリズムを実装することを目標にします.\nDirichlet 境界値問題 #     \\(d\\) 次元空間の中の領域 \\(\\Omega\\) とその境界 \\(\\partial\\Omega\\) について, 以下の関数 \\(u(x)\\) を考えます.   \\[\\left\\{ \\begin{array}{ll} \\frac{1}{2}\\Delta u(x) = 0 \u0026amp; x\\in\\Omega\\\\ u(x) = g(x) \u0026amp; x\\in\\partial\\Omega \\tag{1} \\end{array} \\right.\\]  ここで \\(\\Delta u=0\\) は Laplace 方程式と呼ばれ, Laplace 方程式を満たす \\(u\\) は調和関数と呼ばれています. そして, 境界で \\(u\\) が何かしらの関数 \\(g\\) の値となることを課す条件は Dirichlet 境界条件と呼ばれています.\nこのように, Dirichret 境界条件の下で調和関数 \\(u\\) を求める問題 (1) を, Dirichlet 境界値問題といいます.\nさきほどの牛乳内の光拡散で例えると, 容器のふち \\(\\partial\\Omega\\) に光源 \\(g(x)\\) を置いたときに, 牛乳内 \\(\\Omega\\) へ広がる光拡散 \\(u(x)\\) を計算する問題に対応します.\nWalk-on-Spheres アルゴリズム #  次に, 角谷の原理と, 調和関数の平均値の性質について簡単に触れ, Walk-on-Spheres アルゴリズムの概要の説明へ進みます.\n角谷の原理 #  1ステップの移動幅が無限に小さいランダムウォークを, ブラウン運動と呼びます. ここで, \\(x\\) から出発してブラウン運動によって到着した境界上の点を \\(W_\\tau\\) と書きます.\n   角谷の原理によれば, Dirichlet 境界値問題の解 \\(u(x)\\) は, \\(x\\) から出発したブラウン運動で到達した境界の値 \\(g(W_\\tau)\\) の期待値で表されます.\n \\[\\begin{aligned} u(x)=\\mathbb{E}\\left[g(W_\\tau)\\right] \\tag{2} \\end{aligned}\\]  \u0026ldquo;角谷の原理\u0026rdquo; という名前は一般的な呼称ではないようですが, この記事では [ Sawhney et al. 2022] に倣ってそう呼びます. より一般的な偏微分方程式に対する表現については Feynman-Kac の公式を参照してください.\n平均値の性質 #  点 \\(x\\) を中心とする球の球面を \\(\\partial B(x)\\) と書いたとき, 調和関数 \\(u(x)\\)の値は \\(\\partial B(x)\\) 上の平均値で与えられます.\n \\[\\begin{aligned} u(x) = \\frac{1}{|\\partial B(x)|}\\int_{y\\in\\partial B(x)}u(y)dy \\tag{3} \\end{aligned}\\]  ここで, \\(|\\partial B|\\) は球面の面積です.\n   Walk-on-Spheres アルゴリズム #   平均値の性質 の積分を, モンテカルロ積分で解くことを考えます. 乱数を使って球面 \\(\\partial B(x)\\) に対して一様に点を \\((x^{(1)}, x^{(2)}, \\dots, x^{(N)})\\) と \\(N\\) 個生成したとき, (3) の積分は以下のように見積もることができます.  \\[\\begin{aligned} \\hat{u}(x) = \\frac{1}{N}\\sum_{i=1}^N \\hat{u}(x^{(i)}) \\tag{4} \\end{aligned}\\]  ここで, モンテカルロ積分による推定値を \\(\\hat{u}\\) と表記しました.\n上式の \\(\\hat{u}(x^{(i)})\\) がランダムウォークで到着した境界上の点での値になっていれば, 角谷の原理より, 解 \\(u(x)\\) が近似的に求まります.\nWalk-on-Spheres アルゴリズムでは, 球の半径を境界への最近接距離として, 境界へ至るまで球面上に一様に生成した点をランダムに辿ることを考えます. ランダムに辿る球面の順番を \\(k\\), それぞれの球面上で選んだ点を \\(x_k\\) と改めて書くと, \\(\\hat{u}(x_k)\\) は以下の漸化式で評価できます.\n \\[\\hat{u}(x_k):= \\left\\{ \\begin{array}{ll} \\hat{u}(x_{k\u0026#43;1}) \u0026amp; x_k\\in\\Omega\\\\ g(\\bar{x}_k) \u0026amp; x_k\\in\\partial\\Omega_\\epsilon\\\\ \\tag{5} \\end{array} \\right.\\]     なお, ランダムウォークを有限回で打ち切るために, \\(x_k\\) と境界上の最近接点 \\(\\bar{x}_k\\) の間の距離が \\(\\epsilon\\) 以下であれば, 境界に達したとみなします. そして, 本来の境界 \\(\\partial\\Omega\\) より \\(\\epsilon\\) だけ離れた境界を \\(\\partial\\Omega_\\epsilon\\) と書きます.\nこの漸化式 (5) によって, \\(x^{(i)}=x_1^{(i)}\\) から出発して \\(\\bar{x}_k\\) に到達したランダムウォーク \\(W^{(i)}_\\tau\\) で境界の値が \\(g(W^{(i)}_\\tau)\\) と得られたとすれば, (4) は\n \\[\\begin{aligned} \\hat{u}(x) = \\frac{1}{N}\\sum_{i=1}^N g(W_\\tau^{(i)}) \\tag{6} \\end{aligned}\\]  と書けます.\n実装 #  前節の議論から,\n (5)式: 球面上にランダムに生成した点を境界に至るまで辿り, 境界での値 \\(g(W^{(i)}_\\tau)\\) を求める (6)式: \\(g(W^{(i)}_\\tau)\\) の算術平均をとる  とすれば, Dirichlet 境界値問題 (1) を数値的に解くことができることがわかりました.\nこのサンプルとして, 2次元の Dirichlet 境界値問題に対する Walk-on-Spheres を, ShaderToy に実装しました. https://www.shadertoy.com/view/csjXRw\n以下に, ひとつの経路の計算と, その算術平均をとる部分を抜粋します.\n//------------------------------------------------------------------------ // 1. 球面上にランダムに生成した点を境界に至るまで辿り, 境界での値を求める //------------------------------------------------------------------------ float WalkOnSphere(in vec2 p) { vec2 result = vec2(0.0); for(int i = 0; i \u0026lt; MAX_STEPS; i++) { // 境界への最近接距離を得る result = SDF(p); float closest_dist = result.x; // 最近接距離が 0.001 以下ならループを抜ける if(closestDist \u0026lt; 0.001) { break; } // 半径 closest_dist の円上へランダムに生成した点に移動する p += closest_dist * RandomInCircle(); } // 境界の値を取得する int id = int(result.y); return BoundaryValue(p, id); } //-------------------------------------------------- // 2. 境界での値の算術平均をとる //-------------------------------------------------- // Walk on spheres のひとつの経路から得た値を取得 float v = WalkOnSphere(pos); // 過去に得た history との算術平均をとる outColor = mix(history, vec3(v), 1.0 / numSamples); 結果 #  https://www.shadertoy.com/view/csjXRw で得られた結果です. 左側に解析解, 右側に数値解の結果を並べてあります.\n  \\(N=1\\)\n   Walk-on-Spheres の経路の数 \\(N\\) がひとつのときは, ノイズだらけの見た目ですが..\n  \\(N=10000\\)\n   経路の数 \\(N\\) が十分に大きければ, 数値解が解析解に近いことがわかります.\nさいごに #  この記事では, [ Sawhney et al. 2022] の入口に当たる内容として Laplace 方程式の Dirichret 境界値問題を取り上げ, Walk-on-Spheres アルゴリズムの実装を行いました.\n参考文献では, より一般的な楕円型編微分方程式に対して multiple importance sampling [ Sawhney and Krane 2020] や delta tracking [ Sawhney et al. 2022] といった, パストレーシングの技術が応用されています.\n著者による解説動画 https://www.youtube.com/watch?v=bZbuKOxH71o も要点がわかりやすく説明されているため, 詳しい内容に興味のある方は参考にしてください.\n参考文献 #  Novák, J., Georgiev, I., Hanika, J., Krivánek, J. and Jarosz, W., 2018, August. Monte Carlo methods for physically based volume rendering. In SIGGRAPH Courses (pp. 14-1). #  江沢, 洋 and 中村, 徹. 2020. ブラウン運動. 朝倉書店. #  Sawhney, R. and Crane, K., 2020. Monte Carlo geometry processing: A grid-free approach to PDE-based methods on volumetric domains. ACM Transactions on Graphics, 39(4). #  Sawhney, R., Seyb, D., Jarosz, W. and Crane, K., 2022. Grid-free Monte Carlo for PDEs with spatially varying coefficients. ACM Transactions on Graphics (TOG), 41(4), pp.1-17. #  "});index.add({'id':1,'href':'/posts/202112_advent_calendar/','title':"局所一様媒質に対する Volume Rendering 方程式の漸化式",'section':"Blog",'content':"これは レイトレ Advent Calendar 2021 の記事です.\nはじめに #  リアルアイムレンダリングの話をします.\n[ Hillaire 2016] の 5.6.3 節では, 散乱媒質を描画するときに, Volume Rendering 方程式の内部散乱項に対して入射光と散乱媒質を一様としたときに得られる, 解析解を利用しています.\n後に述べるように, この解析解は 指数フォグを一般化したものに相当します.\n     \\[\\begin{aligned} L(s) = L(0)e^{-\\mu s} \u0026#43; L_{\\text{in}}(1-e^{-\\mu s}) \\end{aligned}\\]  解析解には, 数値積分の誤差が生じません. このため, レイマーチング[ Wrenninge and Zafar 2011]などによって散乱媒質を描画するとき, 入射光と散乱媒質が局所的に一様とみなせるところで, その計算精度を改善してくれます.\nただし [ Hillaire 2016] で行われている議論は, ひとつの散乱媒質と単一散乱に絞ったものです. より一般的な議論を行うためには, 複数の散乱媒質と多重散乱を含んだものを, Volume Rendering 方程式から明示的に求めた資料が欲しいところです.\nそこで, この記事では複数媒質の Volume Rendering 方程式から出発して, 入射光と散乱媒質を局所的に一様としたときの漸化式を導きます1.\n複数媒質の Volume Rendering 方程式 #  まずは, Volume Rendering 方程式を導入します.\nVolume Rendering 方程式とは, 散乱媒質内を進行する光の輝度の変化を記述する方程式で, 文献によっては Radiative Transfer 方程式とも呼ばれます. この記事では, 時間に依存しない Radiative Transfer 方程式を Volume Rendering 方程式と呼びます2.\nただし, その導出の詳細3には触れず, 現象論的な導入 [ Arvo. 1993] [ Fong et al. 2017] [ Novák et al. 2018] のみをおさらいします. また, この記事では, レイリー散乱とミー散乱をする2種類の媒質を混ぜて扱えるように, 複数の散乱媒質に対する Volume Rendering 方程式を導入します.\n散乱媒質と光 #    白丸:フォトン, 赤:1種類めの散乱媒質, 青:2種類めの散乱媒質\n   空気中のちりを \\(I\\) 種類の散乱体からなる粒子の集団, そして空間を進む光を光子からなる粒子の集団であると簡略化4します. そして, 散乱体の集団を「散乱媒質」, 光子の集団を「フォトン」と呼ぶことにします5. 簡単のため, 粒子の形状は全て球とします.\nVolume Rendering 方程式に進む準備として, フォトンの密度を表す輝度と, 散乱媒質の密度を表す散乱係数, そして散乱媒質によるフォトンの散乱を表す位相関数を導入します.\n輝度 #     フォトンの密度は, 位置 \\(\\bm{x}\\) と方向 \\(\\bm{\\omega}\\) に対する輝度 \\(L(\\bm{x},\\bm{\\omega})\\) で表します.\n散乱係数 #     ある方向から \\(i\\) 種類めの散乱体を眺めたときの断面積を散乱断面積 \\(\\sigma^{(i)}\\) と呼び, その散乱体の個数密度を \\(n^{(i)}(\\bm{x})\\) とします. このとき, 単位体積当たりの散乱断面積を散乱係数 \\(\\mu^{(i)}_s(\\bm{x}):=\\sigma^{(i)}n^{(i)}(\\bm{x})\\) で表します.\n散乱の位相関数 #  散乱体の性質に応じて, 光との相互作用は単に弾性散乱を考えるだけで良い場合もあれば, 電磁波の散乱を考慮する必要がある場合もあります.\n   そこで, \\(i\\) 種類めの散乱媒質が, 方向 \\(\\bm{\\omega}'\\) から来たフォトンを方向 \\(\\bm{\\omega}\\) に散乱する割合を 位相関数 \\(p^{(i)}(\\bm{\\omega},\\bm{\\omega}')\\) と書き, その中に様々な効果によって起こる散乱の方向分布を埋め込むことにします.\nなお, 位相関数は, 球面上で積分したときに 1 となるように規格化されています.  \\[\\begin{aligned} \\int_{\\bm{\\omega}\u0026#39;\\in\\mathcal{S}^2} p^{(i)}(\\bm{\\omega},\\bm{\\omega}\u0026#39;)d\\bm{\\omega}\u0026#39; = 1 \\end{aligned}\\]  光の吸収と放出 #  散乱媒質はフォトンを吸収する場合もあるとして, 吸収係数 \\(\\mu^{(i)}_a(\\bm{x})\\) を考えます. 散乱係数と吸収係数を合算したものを, 消散係数 \\(\\mu^{(i)}_e(\\bm{x}) = \\mu^{(i)}_s(\\bm{x}) + \\mu^{(i)}_a(\\bm{x})\\) と呼びます.\nそして, フォトンの放出は source 項 \\(S^{(i)}(\\bm{x})\\) で表します6.\nVolume Rendering 方程式 #  このようにしてフォトンと散乱媒質を表現したとき, 散乱媒質中を進行するフォトンの輝度の変化は, 次の Volume Rendering 方程式で記述されます.\nVolume Rendering 方程式\n \\[\\begin{aligned} (\\bm{\\omega}\\cdot\\nabla)L(\\bm{x},\\bm{\\omega}) = \\sum^I_i\\left[\\lambda^{(i)}(\\bm{x},\\bm{\\omega}) - \\mu_e^{(i)}(\\bm{x})L(\\bm{x},\\bm{\\omega})\\right] \\end{aligned}\\]   ただし  \\[\\begin{aligned} \\lambda^{(i)}(\\bm{x},\\bm{\\omega}) := S^{(i)}(\\bm{x},\\bm{\\omega}) \u0026#43; \\mu_s^{(i)}(\\bm{x}) \\int_{\\mathcal{S}^2} p^{(i)}(\\bm{\\omega},\\bm{\\omega}\u0026#39;)L(\\bm{x},\\bm{\\omega}\u0026#39;)d\\bm{\\omega}\u0026#39; \\end{aligned}\\]  です.\n  Fig. gain 項の各項\n   右辺の \\(\\lambda^{(i)}(\\bm{x},\\bm{\\omega})\\) は, source 項 \\(S^{(i)}(\\bm{x},\\bm{\\omega})\\) と 内部散乱項 \\(\\mu_s^{(i)}(\\bm{x}) \\int_{\\mathcal{S}^2}p^{(i)}(\\bm{\\omega},\\bm{\\omega}')L(\\bm{x},\\bm{\\omega}')d\\bm{\\omega}'\\) による輝度の増加を表します. この記事では, この項を gain 項と呼びます.\n  Fig. loss 項 \\(-\\mu_eL = -(\\mu_a+\\mu_s)L\\)\n   右辺の \\(\\mu_e^{(i)}(\\bm{x})L(\\bm{x},\\bm{\\omega})\\) は, 媒質に衝突して失われる輝度の減少を表します. この記事では, この項を loss 項と呼びます.\nそして, 左辺の方向微分 \\((\\bm{\\omega}\\cdot\\nabla)L(\\bm{x},\\bm{\\omega})\\) によって, 散乱媒質中を進行するフォトンの輝度の変化を表します.\nVolume Rendering 方程式の積分形 #  輝度 \\(L(\\bm{x},\\bm{\\omega})\\) を求めるため, Volume Rendering 方程式の積分形を考えます. 方向 \\(\\bm{\\omega}\\) に沿った積分をわかりやすくするために, 距離 \\(s\\) を使って位置 \\(\\bm{x}\\) を \\(\\bm{x}(s)=\\bm{x}(0)+\\bm{\\omega}s\\) と表し, 方向微分を \\(\\left(\\bm{\\omega}\\cdot\\nabla\\right)L\\left(\\bm{x},\\bm{\\omega}\\right) = \\frac{dL\\left(\\bm{x}(s),\\bm{\\omega}\\right)}{ds}\\) と書き換えます7.\nすると Volume Rendering 方程式は  \\[\\begin{aligned} \\frac{dL\\left(s,\\,\\bm{\\omega}\\right)}{ds} = \\sum^I_i\\left[\\lambda^{(i)}(s,\\,\\bm{\\omega}) - \\mu^{(i)}_e(s)L\\left(s,\\,\\bm{\\omega}\\right)\\right] \\end{aligned}\\]  となります. ここで \\(L(\\bm{x}(s),\\bm{\\omega})\\) を \\(L(s,\\bm{\\omega})\\) と略記しました. \\(\\lambda^{(i)}(s,\\bm{\\omega})\\) や \\(\\mu^{(i)}_e(s)\\) も同様です.\n上式は一階線形微分方程式なので, その積分形は次のように求まります8\nVolume Rendering 方程式(積分形)  \\[\t\\begin{aligned} L(s,\\bm{\\omega}) =L\\left(0,\\bm{\\omega}\\right)\\tau(0,s) \u0026#43; \\int^s_{s\u0026#39;=0}\\lambda(s\u0026#39;,\\bm{\\omega})\\tau(s\u0026#39;,s) ds\u0026#39; \\end{aligned}\\]   ただし  \\[\t\\begin{aligned} \\tau(a,b) \u0026amp;:= \\exp\\left[-\\int^b_{s\u0026#39;\u0026#39;=a}\\left(\\sum^I_i\\mu_e^{(i)}(s\u0026#39;\u0026#39;)\\right)ds\u0026#39;\u0026#39;\\right]\\\\ \\lambda(s\u0026#39;,\\bm{\\omega}) \u0026amp;:= \\sum_i\\left[S^{(i)}(s\u0026#39;,\\bm{\\omega}) \u0026#43; \\mu_s^{(i)}(s\u0026#39;) \\int_{\\mathcal{S}^2} p^{(i)}(\\bm{\\omega},\\bm{\\omega}\u0026#39;)L(s\u0026#39;,\\bm{\\omega}\u0026#39;)d\\bm{\\omega}\u0026#39;\\right] \\end{aligned}\\]  です. ここで導入した \\(\\tau(a,b)\\) を transmittance と呼びます.\n以上により, 位置 \\(\\bm{x}(0)\\) で輝度 \\(L(0,\\bm{\\omega})\\) を持つ物体を 位置 \\(\\bm{x}(s)\\) から眺めたときの輝度 \\(L(s,\\bm{\\omega})\\) は, Volume Rendering 方程式を解けば求まることがわかりました.\nただし, 内部散乱項に対する入射光 \\(L(s', \\bm{\\omega}')\\) は, どこかの光源から直接来たフォトン \\(L^{\\text{0th}}\\) のほか, 他の物体に1回散乱してから来たフォトン \\(L^{\\text{1st}}\\) や 2回散乱して来たフォトン \\(L^{\\text{2nd}}\\) .. などと 媒質に繰り返し散乱してから来たフォトンを含んでいます.\n \\[\t\\begin{aligned} u_s^{(i)}(s\u0026#39;)\\int_{\\mathcal{S}^2} p^{(i)}(\\bm{\\omega},\\bm{\\omega}\u0026#39;) \\left[L^{\\text{0th}}(s\u0026#39;,\\bm{\\omega}\u0026#39;) \u0026#43; L^{\\text{1st}}(s\u0026#39;,\\bm{\\omega}\u0026#39;) \u0026#43; L^{\\text{2nd}}(s\u0026#39;,\\bm{\\omega}\u0026#39;) \u0026#43; \\cdots\\right] d\\bm{\\omega}\u0026#39;\\\\ \\end{aligned}\\]  これらのフォトンの輝度もまた, Volume Rendering 方程式によって解かれていなければならないため, この方程式は簡単に解くことはできません. この問題は, モンテカルロ法を用いて 多数のフォトンの経路に沿って Volume Rendering 方程式を再帰的に解き, 輝度 \\(L(s,\\bm{\\omega})\\) の期待値を求めることで 解決できることが知られています9.\n一方, リアルタイムレンダリングでは一般的に, 散乱の高次項をさまざまな近似手法で取り扱います. この記事ではその詳細には触れず, 単に入射光が直接光 \\(L_{\\text{in}}^{\\text{direct}}\\) と間接光 \\(L_{\\text{in}}^{\\text{indirect}}\\) で書けるとしておきます.\n \\[\t\\begin{aligned} u_s^{(i)}(s\u0026#39;)\\int_{\\mathcal{S}^2} p^{(i)}(\\bm{\\omega},\\bm{\\omega}\u0026#39;) L_{\\text{in}}(s\u0026#39;,\\bm{\\omega}\u0026#39;) d\\bm{\\omega}\u0026#39; \\end{aligned}\\]   \\[\t\\begin{aligned} L_{\\text{in}}(s\u0026#39;,\\bm{\\omega}\u0026#39;) \u0026amp;= L_{\\text{in}}^{\\text{direct}}(s\u0026#39;,\\bm{\\omega}\u0026#39;) \u0026#43; L_{\\text{in}}^{\\text{indirect}}(s\u0026#39;\\bm{\\omega}\u0026#39;)\\\\ L_{\\text{in}}^{\\text{direct}}(s\u0026#39;,\\bm{\\omega}\u0026#39;) \u0026amp;:= L^{\\text{0th}}(s\u0026#39;,\\bm{\\omega}\u0026#39;)\\\\ L_{\\text{in}}^{\\text{indirect}}(s\u0026#39;,\\bm{\\omega}\u0026#39;) \u0026amp;:= L^{\\text{1st}}(s\u0026#39;,\\bm{\\omega}\u0026#39;) \u0026#43; L^{\\text{2nd}}(s\u0026#39;,\\bm{\\omega}\u0026#39;) \u0026#43; \\cdots \\end{aligned}\\]  ここで, 内部散乱項に対する入射光を明示するため, \\(L(s',\\bm{\\omega}')\\) を \\(L_{\\text{in}}(s',\\bm{\\omega}')\\) と書きました.\n局所的に一様な媒質に対する漸化式 #  この節では, レイマーチング[ Wrenninge and Zafar 2011]やボリュームフォグ[ Wronski 2014]といった手法を導くことを念頭に置いて, 視点 \\(\\bm{x}(s_e)\\) ともう一方の端点 \\(\\bm{x}(s_s)\\) の間を \\(N\\) 個の区間に分割し, その区間に沿って Volume Rendering 方程式を繰り返し解くことを考えます.\n   局所的に一様な媒質 #  いま, Volume Rendering 方程式を1ステップ計算するあいだ, 散乱媒質と入射光が局所的に一様であると仮定します10.\n   以下で, その各ステップの積分が解析的に解けることを示します.\n解析解 #  散乱係数と入射光が一様, すなわち \\(\\bm{x}\\) に依存しないとき, Volume Rendering 方程式は次のように書けます.  \\[\\begin{aligned} L(s_n,\\bm{\\omega}) = L\\left(s_{n-1},\\bm{\\omega}\\right)\\tau(s_{n-1},s_n) \u0026#43; \\int^{s_n}_{s\u0026#39;=s_{n-1}}\\lambda(\\bm{\\omega})\\tau(s\u0026#39;,s_n) ds\u0026#39; \\end{aligned}\\]   \\[\\begin{aligned} \u0026amp;\\tau(a,b) :=\\exp\\left[-\\left(\\sum^I_i\\mu^{(i)}_e\\right)|b-a|\\right]\\\\ \u0026amp;\\lambda(\\bm{\\omega}) := \\sum^I_i\\left[ S^{(i)}(\\bm{\\omega}) \u0026#43; \\mu^{(i)}_s \\int_{\\mathcal{S}^2} p^{(i)}(\\bm{\\omega},\\bm{\\omega}\u0026#39;)L_{\\text{in}}(\\bm{\\omega}\u0026#39;)d\\bm{\\omega}\u0026#39; \\right] \\end{aligned}\\]  このとき, 次の項は解析的に解けます.  \\[\\begin{aligned} \\int^{s_n}_{s\u0026#39;=s_{n-1}}\\lambda(\\bm{\\omega})\\tau(s\u0026#39;,s_n) ds\u0026#39; \u0026amp;= \\int^{s_n}_{s\u0026#39;=s_{n-1}}\\lambda(\\bm{\\omega})e^{-\\left(\\sum^I_i\\mu^{(i)}_e\\right)(s_n-s\u0026#39;)} ds\u0026#39;\\\\ \u0026amp;= \\lambda(\\bm{\\omega}) e^{-\\left(\\sum^I_i\\mu^{(i)}_e\\right)s_n}\\int^{s_n}_{s\u0026#39;=s_{n-1}}e^{\\left(\\sum^I_i\\mu^{(i)}_e\\right)s\u0026#39;} ds\u0026#39;\\\\ \u0026amp;= \\frac{\\lambda(\\bm{\\omega})}{\\sum^I_i\\mu^{(i)}_e}\\left[1-\\tau(s_{n-1},s_n)\\right] \\end{aligned}\\]  これにより, Volume Rendering 方程式の解析解が次のように得られます.\nVolume Rendering 方程式の解析解  \\[\\begin{aligned} L(s_n,\\bm{\\omega}) = L\\left(s_{n-1}, \\bm{\\omega}\\right)\\tau(s_{n-1}, s_n) \u0026#43; \\frac{\\lambda(\\bm{\\omega})}{\\sum^I_i\\mu^{(i)}_e}\\left[1-\\tau(s_{n-1}, s_n)\\right] \\end{aligned}\\]   こうして, [ Hillaire 2016] の 5.6.3 節で 示されている解析解を一般化したものが得られました. この式は \\(\\tau(s_{n-1}, s_n)\\) をアルファとする, 単純なアルファブレンドの形になっていることも特筆すべきところです.\nなお, 上式で吸収係数 \\(\\mu^{(i)}_a\\) と source 項 \\(S^{(i)}(\\bm{\\omega})\\) をゼロ, そして位相関数を等方 \\(p^{(i)}(\\bm{\\omega},\\bm{\\omega}')=\\frac{1}{4\\pi}\\), 入射光も等方 \\(L_{\\text{in}}(\\bm{\\omega}')=L_{\\text{in}}\\) としたとき, はじめにで取り上げた 指数フォグ\n指数フォグ  \\[\\begin{aligned} L(s_n,\\bm{\\omega}) = L(s_{n-1},\\bm{\\omega})e^{-\\mu_s |s_n-s_{n-1}|} \u0026#43; L_{\\text{in}}(1-e^{-\\mu_s |s_n-s_{n-1}|}) \\end{aligned}\\]   が得られます11. 以後, ひとつの距離に基づいて散乱媒質の計算を行う手法を, 距離ベースのフォグ [ Wenzel 2007]と呼びます.\n漸化式 #   Volume Rendering 方程式の解析解を次々に解くために, 次のような表記を行います.  \\[\t\\begin{aligned} L_n:=L(s_n,\\bm{\\omega}),\\quad t_n:=\\tau(s_{n-1}, s_n),\\quad l_n:= \\frac{\\lambda(\\bm{\\omega})}{\\sum^I_i\\mu^{(i)}_e}(1-t_n) \\end{aligned}\\]  この表記のもとで, Volume Rendering 方程式の解析解 は以下のように書けます\n \\[\t\\begin{aligned} L_n =L_{n-1}t_n \u0026#43; l_n \\end{aligned}\\]  これを使い, \\(\\bm{x}(s_s)\\) に輝度 \\(L_s\\) の物体があり, それを 視点 \\(\\bm{x}(s_e)\\) から眺めたときの輝度 \\(L_e\\) を \\(N\\) ステップの計算で求めることを考えます. このとき, 計算は \\(\\bm{x}(s_s)\\) から \\(\\bm{x}(s_e)\\) に向かって行うことにします12.\nまず, \\(\\bm{x}(s_s)\\) を1ステップ手前から眺めたときの輝度 \\(L_e\\) は\n    \\[\t\\begin{aligned} L_e=L_st_1\u0026#43;l_1 \\end{aligned}\\]  と求まります. そして, 2ステップ手前から眺めたときの輝度 \\(L_e\\) は,\n    \\[\t\\begin{aligned} L_e=L_st_2t_1 \u0026#43; l_2t_1 \u0026#43; l_1 \\end{aligned}\\]  となります. これを \\(N\\) 回繰り返すと, \\(L_e\\) は\n    \\[\t\\begin{aligned} L_e=L_sT_N \u0026#43; L_N \\end{aligned}\\]   \\[\t\\begin{aligned} T_n:=T_{n-1}t_n,\\quad L_n:=l_nT_{n-1} \u0026#43; L_{n-1} \\end{aligned}\\]  という漸化式として得られます.\nまとめ #  こうして, 位置 \\(\\bm{x}(s_s)\\) で輝度 \\(L_s\\) をもつ物体を, 散乱媒質を通して方向 \\(\\bm{\\omega}\\) から眺めたとき, 視点 \\(\\bm{x}(s_e)\\) に到達するフォトンの輝度 \\(L_e\\) は, 次の漸化式によって与えられることがわかりました.\n漸化式  \\[\t\\begin{aligned} L_e=L_sT_N \u0026#43; L_N \\end{aligned}\\]   \\[\t\\begin{aligned} T_n:=T_{n-1}t_n,\\quad L_n:=l_nT_{n-1} \u0026#43; L_{n-1} \\end{aligned}\\]   その1ステップで計算される \\(t_n\\) と \\(l_n\\) は, 次のように与えられます.  \\[\t\\begin{aligned} t_n:=e^{-\\left[\\sum^I_i\\mu^{(i)}_e\\right] |s_n-s_{n-1}|},\\quad l_n:= \\frac{\\lambda(\\bm{\\omega})}{\\sum^I_i\\mu^{(i)}_e}(1-t_n) \\end{aligned}\\]   \\[\\begin{aligned} \\lambda(\\bm{\\omega}) := \\sum^I_i\\left[ S^{(i)}(\\bm{\\omega}) \u0026#43; \\mu^{(i)}_s \\int_{\\mathcal{S}^2} p^{(i)}(\\bm{\\omega},\\bm{\\omega}\u0026#39;) \\left(L_{\\text{in}}^{\\text{direct}}(\\bm{\\omega}\u0026#39;) \u0026#43; L_{\\text{in}}^{\\text{indirect}}(\\bm{\\omega}\u0026#39;)\\right) d\\bm{\\omega}\u0026#39; \\right] \\end{aligned}\\]  漸化式の考察 #  前節で求めた 漸化式を使うことで, ステップ数を \\(N=1\\) とすれば距離ベースのフォグ, \\(N\\gt1\\) とすれば, レイマーチングの積分の1ステップが得られます. \\(T_n\\) と \\(L_n\\) を3Dテクスチャのボクセルに保管すれば, それはボリュームフォグとなります.\nまた, 漸化式 は \\(T_N\\) をアルファとする pre-multiplied アルファブレンド の形になっています. これは, 2つの独立なレイマーチングによって \\(T_M, L_M\\) と \\(T_N, L_N\\) が得られたとしたとき, これらもまた同じ漸化式で合成できることを意味しています. この性質は, 例えば近景でボリュームフォグ、遠景でレイマーチングと別々に計算した結果を, 後で合成するといった用途に使えるでしょう.\nさいごに #  この記事では, 複数媒質の Volume Rendering 方程式に対し, 入射光と散乱媒質が局所的に一様な場合の 解析解を求め, その 漸化式を導出しました. そして, 漸化式の考察で, それが距離ベースのフォグ同士, あるいは pre-multiplied アルファによる半透明物体同士の連結を一般化した概念になっていることがわかりました.\n 指数フォグの導出例で見たように, この漸化式に散乱媒質や光源を与えることで, その具体的な実装を導くことができます.\nリアルタイムレンダリングの散乱媒質の計算について, どのような手法を組み合わせ, どのような媒質や光源を与え, そしてどのような近似を取るかを議論するとき, この記事が参考になれば幸いです.\n参考文献 #  Chandrasekhar, S. 1960. Radiative transfer. Dover Publications Inc. #  Cercignani, C. 1988. The Boltzmann Equation and Its Applications. Springer-Verlaq. #  Arvo, J. 1993. Transfer equations in global illumination. SIGGRAPH’93 Course Notes. #  Pauly, M., Kollig, T. and Keller, A., 2000, June. Metropolis light transport for participating media. In Eurographics Workshop on Rendering Techniques (pp. 11-22). Springer, Vienna. #  Jensen, H.W., 2001. Realistic image synthesis using photon mapping. AK Peters/crc Press. #  Hoffman, N. and Preetham, A.J., 2002, March. Rendering outdoor light scattering in real time. In Proceedings of Game Developer Conference (Vol. 2002, pp. 337-352). #  Mishchenko, M.I., 2002. Vector radiative transfer equation for arbitrarily shaped and arbitrarily oriented particles: a microphysical derivation from statistical electromagnetics. Applied optics, 41(33), pp.7114-7134. #  Wenzel, C., 2007, March. Real-Time atmospheric effects in games revisited. In Game Developers Conference (pp. 551-556). #  Wrenninge, M. and Zafar, N.B., 2011. Production Volume Rendering 1: Fundamentals. ACM, New York, NY, USA, ACM SIGGRAPH. #  Wronski, B., 2014, August. Volumetric Fog: Unified Compute Shader-Based Solution to Atmospheric Scattering. In ACM SIGGRAPH. #  Hillaire, S., 2016, July. Physically based sky, atmosphere and cloud rendering in frostbite. In ACM SIGGRAPH. #  Fong, J., Wrenninge, M., Kulla, C. and Habel, R., 2017. Production volume rendering: Siggraph 2017 course. In ACM SIGGRAPH 2017 Courses (pp. 1-79). #  Novák, J., Georgiev, I., Hanika, J., Krivánek, J. and Jarosz, W., 2018, August. Monte Carlo methods for physically based volume rendering. In SIGGRAPH Courses (pp. 14-1). #  Raab, M., 2019. Ray Tracing Inhomogeneous Volumes. In Ray Tracing Gems (pp. 521-531). Apress, Berkeley, CA. #  Guo, Y., Jarabo, A. and Zhao, S., 2021. Beyond mie theory: systematic computation of bulk scattering parameters based on microphysical wave optics. ACM Transactions on Graphics (TOG), 40(6), pp.1-12. #    要するに, Volume Rendering 方程式の解の Neumann 級数展開[ Pauly et al. 2000] について, 入射光と媒質が局所的に一様とした場合に得られる漸化式について書きます. \u0026#x21a9;\u0026#xfe0e;\n 正確には, Radiative Transfer 方程式 [ Chandrasekhar 1960] から時間依存性を除き, 媒質の光の放射を黒体輻射に限らないとしたものを, この記事では Volume Rendering 方程式と呼びます. 時間依存性を除くのは, 日常の風景のシミュレーションをする用途で, 光の速度を無限と考えて良いと仮定するからです. 光の放射を黒体輻射に限らないとするのは, 蛍光放射や, ゲームの魔法発動時のエフェクトなど, 一般の発光現象を扱いたいからです. \u0026#x21a9;\u0026#xfe0e;\n Radiative Transfer 方程式 [ Chandrasekhar 1960] は, 光の粒子的性質に着目する場合は Boltzmann 方程式から [ Cercignani 1988] , 波動的性質に着目する場合は Maxwell 方程式から [ Mishchenko 2002] [ Guo et al. 2021] 導かれます. 両者とも, 散乱体による光の散乱問題を取り扱うのは共通ですが, 光を粒子として扱うか, 電磁波として扱うかが違います. \u0026#x21a9;\u0026#xfe0e;\n 光の波動的性質を無視して, その運動が気体分子運動論で近似できる場合のみ考えます. 屈折率による進行方向の変化も無視します. そして, 媒質粒子との相互作用の際に起こる量子効果は, 散乱係数や位相関数に隠蔽されるものとします. \u0026#x21a9;\u0026#xfe0e;\n 光子とその英語名であるフォトンは、一般的に 電磁場の量子のことを指します. この記事では, パストレーシングの分野で言及されるフォトンマッピング[ Jensen 2001]と無矛盾に話を進めたいため, 光子の集団をフォトンと呼びます. \u0026#x21a9;\u0026#xfe0e;\n この記事では source 項へなんでも入れられるよう, 単に \\(S\\) と書いています. ただし特別な理由が無ければ, 吸収と放出のバランスが取れるように \\(S=\\mu_aL_{\\text{emission}}\\) などと吸収係数 \\(\\mu_a\\) を使って書くのが無難です. \u0026#x21a9;\u0026#xfe0e;\n \\(\\left(\\bm{\\omega}\\cdot\\nabla\\right)L\\left(\\bm{x},\\bm{\\omega}\\right) = \\left(\\frac{d\\bm{x}(s)}{ds}\\cdot\\nabla\\right)L\\left(\\bm{x}(s),\\bm{\\omega}\\right) = \\frac{dL\\left(\\bm{x}(s),\\bm{\\omega}\\right)}{ds}\\) \u0026#x21a9;\u0026#xfe0e;\n \\(\\frac{dy(x)}{dx}+p(x)L(x)=q(x)\\) の一般解は \\(y(x)=ce^{-\\int^x p(\\xi)d\\xi}+ \\int^x q(\\zeta)e^{-\\int^x_\\zeta p(\\xi)d\\xi}d\\zeta\\). 積分範囲を \\(0\\) から \\(x\\) とすれば, 積分定数は \\(c=y(0)\\) となります. \u0026#x21a9;\u0026#xfe0e;\n 入門的な文献は [ Raab 2019] を, 詳細は [ Fong et al. 2017] [ Novák et al. 2018] を参照してください. \u0026#x21a9;\u0026#xfe0e;\n Boltzmann 方程式から Radiative Transfer 方程式を導くとき, 既に散乱媒質の分布が時間変化によって変わらない, すなわち平衡状態であるという仮定が入っています. ここでは更に, 散乱媒質に対する外場の作用を局所的に無視できるとして, その分布を一様とみなせるとしています. \u0026#x21a9;\u0026#xfe0e;\n さらに例を挙げると, 媒質にミー散乱とレイリー散乱の2種類を, そして光源に平行光 \\(L_{\\text{sun}} \\delta(\\bm{\\omega}'-\\bm{\\omega}_{\\text{sun}})\\) を考え, 内部散乱項でその単一散乱のみを計算するとしたとき, [ Hoffman and Preetham 2002] の Implementation Note にあるモデルが得られます. \u0026#x21a9;\u0026#xfe0e;\n 視点から奥に向かって行う計算を紹介するのは, transmittance が 1 になったら計算を打ち切るなど, 実用上の利点があるからです. \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':2,'href':'/posts/202012_advent_calendar/','title':"散乱理論とレンダリング方程式",'section':"Blog",'content':"これは レイトレ Advent Calendar 2020 の記事です。\nはじめに #  散乱理論 [ 砂川 1977] では, 散乱現象を微分散乱断面積 \\(\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\;[\\text{m}^2\\,\\text{sr}^{-1}]\\)\n  Fig. 微分散乱断面積 \\(\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\;[\\text{m}^2\\,\\text{sr}^{-1}]\\)\n   で表現します. この概念は, Rendering 方程式にある BRDF \\(f_r(\\bm{i},\\bm{o})\\;[\\text{sr}^{-1}]\\) とよく似ています.\n微分散乱断面積は, レイリー散乱や, 剛体球に弾かれる粒子の散乱など, 様々な散乱現象を求めるのに使われます. これと BRDF との対応関係がわかれば, 散乱理論で培われた知見を, さまざまな BRDF の考察に応用することができるかもしれません.\nこの対応関係は, [ Arvo 1993] で示唆されているように, 既知であることが伺えます. しかし, このことを一貫して解説した文献を見つけることができなかったため, 自分なりにノートをまとめました.\n散乱媒質と光 #  散乱媒質 #  空間を漂うホコリや, 酸素や窒素など大気を構成する分子, そして水滴などのエアロゾルを まとめて散乱媒質と呼ぶことにします. そしてこれらの粒子は, 空間中を位置 \\(\\bm{x}\\), 運動量 \\(\\bm{p}\\) で運動するものと考えます.\n光 #  光とは, 電磁波の振動数 \\(\\nu\\) が 可視光 の領域 400THz ～ 800THz 程度にあるものを指します. 電磁波にはその最小単位があり, それはエネルギー \\(h\\nu\\) をもつ光子として知られています. 光子には, 空間を波動として伝搬し, 物質と粒子として相互作用する性質があります.\nここでは, 光子の波動的性質を無視します. つまり光子を, 空間を粒子として伝搬し, 物質と粒子として相互作用する物体とします.\nこの簡略化によって, 散乱媒質と光の両者は, 位置 \\(\\bm{x}\\), 運動量 \\(\\bm{p}\\) で空間を運動する 粒子として等しく扱うことができるようになります.\n気体分子運動論 #  位置 \\(\\bm{x}\\), 運動量 \\(\\bm{p}\\) で空間を運動する粒子の集団があったとき, その集団の性質を考える体系は 気体分子運動論 として知られています. のちに, 散乱媒質による光の散乱を議論するため, ここで必要な知識をおさらいしておきます.\n密度関数 #  時間 \\(t\\), 位置 \\(\\bm{x}(t)\\), 運動量 \\(\\bm{p}(t)\\) にある粒子の集団を, 密度関数 \\(f(\\bm{x},\\bm{p},t)\\) で表します1.\nそして, 密度関数を運動量体積要素 \\(d\\bm{p}=dp_xdp_ydp_z\\) で積分すれば, 位置 \\(\\bm{x}\\) の粒子数密度   \\[\t\\frac{1}{h^3}\\int f(\\bm{x},\\bm{p},t)d\\bm{p} = n(\\bm{x},t) \\qquad[\\text{m}^{-3}]\\]  が, 粒子数密度 \\(n(\\bm{x},t)\\) を体積要素 \\(d\\bm{x}=dxdydz\\) で積分すれば, 全粒子数  \\[\t\\int n(\\bm{x},t)d\\bm{x} = N \\qquad[\\text{-}],\\]  と得られるとします. ここで, 全粒子数 \\(N\\) は粒子の運動に伴って変化しないとしました2. また, \\(d\\bm{x}d\\bm{p}\\) の単位 \\([\\text{J}^3\\,\\text{s}^3]\\) をキャンセルするため, プランク定数 \\(h\\,[\\text{J}\\,\\text{s}]\\) を使った係数 \\(\\frac{1}{h^3}\\) を掛けました.\nこの密度関数を使い, 媒質の中を光がどう広がっていくかを考えます. 光が媒質の中を進むに従って衝突を繰り返し, その密度分布を変えていくことを表現するために, 密度関数の時間変化を  \\[\t\\frac{df}{dt} = \\left(\\frac{\\partial f}{\\partial t}\\right)_\\text{coll}\\]  と表します. 左辺は \\(f(\\bm{x}(t),\\bm{p}(t),t)\\) を \\(t\\) で全微分することで  \\[\t\\frac{df}{dt} = \\frac{\\partial f}{\\partial t} \u0026#43; \\frac{\\partial f}{\\partial\\bm{x}}\\cdot\\dot{\\bm{x}} \u0026#43; \\frac{\\partial f}{\\partial\\bm{p}}\\cdot\\dot{\\bm{p}}\\]   \\[\t\\dot{\\bm{x}}:=\\frac{d\\bm{x}}{dt},\\; \\dot{\\bm{p}}:=\\frac{d\\bm{p}}{dt}\\]  と与えられます.\n右辺は \\(\\left(\\frac{\\partial f}{\\partial t}\\right)_\\text{coll}\\) はこれから考えます. 以降, この項を衝突項と呼びます,\n衝突率 #  粒子同士の衝突を考えるために, 単位時間当たりの衝突率 \\(\\eta\\,[\\text{s}^{-1}]\\) を導入し, 衝突による密度関数の変化を  \\[\t\\left(\\frac{\\partial f}{\\partial t}\\right)_\\text{coll} \\sim f\\,\\eta\\]  と見積もることにします.\nそして, 粒子へ空間的な広がりを持たせるために, 散乱断面積 \\(\\sigma\\,[\\text{m}^2]\\) という概念を導入します.\n  Fig. 散乱断面積 \\(\\sigma\\,[\\text{m}^2]\\)\n   これに空間中の粒子密度 \\(n\\,[\\text{m}^{-3}]\\) と, 粒子の相対速度 \\(v\\,[\\text{m}\\,\\text{s}^{-1}]\\) を掛ければ, 粒子同士の衝突率は  \\[\t\\eta = n \\sigma v \\qquad [\\text{s}^{-1}]\\]  と求まります.\n  Fig. 衝突率 \\(\\eta\\)\n   -- 微分散乱断面積 #  次に, 位置 \\(\\bm{x}\\) で \\(\\bm{p}\\) と \\(\\bm{p}_*\\) の粒子が衝突して, \\(\\bm{p}'\\) と \\(\\bm{p}'_*\\) になることを考えます.\n  Fig. \\(\\bm{p},\\,\\bm{p}_* \\rightarrow \\bm{p}',\\,\\bm{p}'_*\\)\n   このとき, 前節で導入した衝突率は方向依存性がないため, 球の形をした粒子同士の衝突しか表現することができません. そこで, 次のように微分散乱断面積 \\(\\left|\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\right|\\) を導入します.\n  Fig. 微分散乱断面積 \\(\\left|\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\right|\\;[\\text{m}^2/\\text{sr}]\\)\n   まず, 方向 \\(\\bm{i}\\) と \\(\\bm{o}\\) を  \\[\t\\bm{o}=\\frac{\\bm{p}}{|\\bm{p}|},\\quad \\bm{i}=\\frac{\\bm{p}\u0026#39;}{|\\bm{p}\u0026#39;|}\\]  とし, それらのなす角を \\(\\theta,\\,\\varphi\\). 立体角を \\(\\bm{\\omega}=\\sin\\theta d\\theta d\\varphi\\) と書きます3.\nそして, 方向 \\(\\bm{\\omega}\\) に垂直な微小断面積 \\(d\\bm{\\omega}\\) を, 微小立体角の関数であることを仮定して,  \\[\t\\sigma = \\int d\\bm{\\sigma} = \\int_{S^2}\\left|\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\right|d\\bm{\\omega} \\qquad[\\text{m}^2\\,\\text{sr}^{-1}]\\]  と, 微分散乱断面積 \\(\\left|\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\right|\\) を導入します.\n衝突項 #  それでは, 衝突項の具体的な表現を与えます.\nまず, 密度関数 \\(f(\\bm{x},\\bm{p},t)\\) が増えるときと減るときに分けて考え, 衝突項を獲得項と損失項の二つで表します.  \\[\t\\left(\\frac{\\partial f}{\\partial t}\\right)_\\text{coll} = \\left(\\frac{\\partial f}{\\partial t}\\right)_\\text{gain} - \\left(\\frac{\\partial f}{\\partial t}\\right)_\\text{loss}\\]  密度関数が減るときは, 位置 \\(\\bm{x}\\) で \\(\\bm{p}\\) と \\(\\bm{p}_*\\) の粒子が衝突して, \\(\\bm{p}'\\) と \\(\\bm{p}'_*\\) になる場合です.\n  Fig. \\(\\bm{p},\\,\\bm{p}_* \\rightarrow \\bm{p}',\\,\\bm{p}'_*\\)\n   \\(f(\\bm{p})\\) は, 運動量 \\(\\bm{p}_*\\) を持つ粒子に衝突したぶんだけ減少します. その粒子数は \\(f(\\bm{p}_*)d\\bm{p}_*\\), 相対速度は \\(|\\bm{v}-\\bm{v}_*|\\), 散乱断面積は \\(\\left|\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\right|d\\bm{\\omega}\\) となることから, 衝突率は  \\[\t|\\bm{v}-\\bm{v}_*|\\left|\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\right|f(\\bm{p}_*)d\\bm{p}_*d\\bm{\\omega} \\qquad[\\text{s}^{-1}]\\]  となります. 従って, 損失項は  \\[\t\\left(\\frac{\\partial f}{\\partial t}\\right)_\\text{loss} = \\iint|\\bm{v}-\\bm{v}_*|\\left|\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\right|f(\\bm{p})f(\\bm{p}_*)d\\bm{p}_*d\\bm{\\omega}\\]  と得られます.\n密度関数が増えるときは, 減るときと逆に, \\(\\bm{p}'\\) と \\(\\bm{p}'_*\\) の粒子が衝突して \\(\\bm{p}\\) と \\(\\bm{p}_*\\) になる場合を考えます.\n  Fig. \\(\\bm{p}',\\,\\bm{p}'_* \\rightarrow \\bm{p},\\,\\bm{p}_*\\)\n   詳細は参考文献 [ Cercignani 1988; 藤田 1989; Kardar 2007] に譲って省略しますが, 衝突時のエネルギー保存と運動量保存を考慮することで, 損失項は  \\[\t\\left(\\frac{\\partial f}{\\partial t}\\right)_\\text{gain} = \\iint|\\bm{v}-\\bm{v}_*|\\left|\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\right|f(\\bm{p}\u0026#39;)f(\\bm{p}\u0026#39;_*)d\\bm{p}_*d\\bm{\\omega}\\]  と得られます.\n上記の損失項と獲得項を使い, 衝突項は  \\[\t\\left(\\frac{\\partial f}{\\partial t}\\right)_\\text{loss} = \\iint|\\bm{v}-\\bm{v}_*|\\left|\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\right| \\left[f(\\bm{p}\u0026#39;)f(\\bm{p}\u0026#39;_*) - f(\\bm{p})f(\\bm{p}_*)\\right]d\\bm{p}_*d\\bm{\\omega}\\]  となります.\nBoltzmann 方程式 #  以上の結果をまとめると  \\[\\begin{aligned} \u0026amp;\\left(\\frac{\\partial}{\\partial t} \u0026#43; \\dot{\\bm{x}}\\cdot\\frac{\\partial}{\\partial\\bm{x}} \u0026#43; \\dot{\\bm{p}}\\cdot\\frac{\\partial}{\\partial\\bm{p}}\\right)f(\\bm{p})\\\\ \u0026amp;\\qquad = \\iint|\\bm{v}-\\bm{v}_*| \\left|\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\right|\\left[f(\\bm{p}\u0026#39;)f(\\bm{p}\u0026#39;_*) - f(\\bm{p})f(\\bm{p}_*)\\right]d\\bm{p}_*d\\bm{\\omega} \\end{aligned}\\]  が得られます. これは, Boltzmann 方程式として知られています. 詳しくは, [ Cercignani 1988; 藤田 1989; Kardar 2007] などを参考にしてください.\nこの節のまとめ #  この節では, 粒子の集団を 密度関数 \\(f(\\bm{x},\\bm{p},t)\\), 粒子同士の衝突を 微分散乱断面積 \\(\\left|\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}}\\right|\\) で書いたとき, その密度関数が空間を動く様子が Boltzmann 方程式 で与えられることを導きました.\nRadiative Transfer #  光と媒質の Boltzmann 方程式 #  空間中に光と散乱媒質の2成分から成る粒子の集団があったとき, 光に関する Boltzmann 方程式を求めます.\n光の密度関数を \\(f_p(\\bm{x},\\bm{p},t)\\), 媒質の密度関数を \\(f_m(\\bm{x},\\bm{p},t)\\) と書けば, Boltzmann 方程式は  \\[\t\\left( \\frac{\\partial }{\\partial t} \u0026#43; \\dot{\\bm{x}}\\cdot\\frac{\\partial}{\\partial\\bm{x}} \u0026#43; \\dot{\\bm{p}}\\cdot\\frac{\\partial}{\\partial\\bm{p}} \\right)f_p(\\bm{p}) = \\left(\\frac{\\partial f_p}{\\partial t}\\right)_{pm} \u0026#43; \\left(\\frac{\\partial f_p}{\\partial t}\\right)_{pp}\\]   \\[\\begin{aligned} \\left(\\frac{\\partial f_p}{\\partial t}\\right)_{pm} \u0026amp;= \\int |\\bm{v}-\\bm{v}_*| \\left|\\frac{d\\bm{\\sigma}_{pm}}{d\\bm{\\omega}}\\right|\\left[f_p(\\bm{p}\u0026#39;)f_m(\\bm{p}\u0026#39;_*) - f_p(\\bm{p})f_m(\\bm{p}_*)\\right]d\\bm{p}_*d\\bm{\\omega}\\\\ \\left(\\frac{\\partial f_p}{\\partial t}\\right)_{pp} \u0026amp;= \\int |\\bm{v}-\\bm{v}_*| \\left|\\frac{d\\bm{\\sigma}_{pp}}{d\\bm{\\omega}}\\right|\\left[f_p(\\bm{p}\u0026#39;)f_p(\\bm{p}\u0026#39;_*) - f_p(\\bm{p})f_p(\\bm{p}_*)\\right]d\\bm{p}_*d\\bm{\\omega} \\end{aligned}\\]  となります. \\(\\sigma_{pm}\\) は光が媒質へ衝突するときの散乱断面積, \\(\\sigma_{pp}\\) は光が光へ衝突するときの散乱断面積です. また, \\(f(\\bm{x},\\bm{p},t)\\) を \\(f(\\bm{p})\\) と略記しています.\nいま, 光に対して\n 外力を無視する  \\[\t\\dot{\\bm{p}}=0\\]   速度は \\(c\\,[\\text{m}\\,\\text{s}^{-1}]\\) で一定とする  と仮定します.\nそして, 媒質に対して,\n 媒質の移動速度は, 光の速度 \\(c\\) に比べて無視できる  \\[\t|\\bm{v}-\\bm{v}_*|\\approx c\\]   光との衝突による運動量変化は無視できる  \\[\tf_m(\\bm{p}\u0026#39;_*)\\approx f_m(\\bm{p}_*)\\]   光同士の散乱断面積は, 媒質と光の散乱断面積に比べて無視できる  \\[\t\\sigma_{pm} \\gg \\sigma_{pp}\\]    と仮定します.\nこれをさきほどの Boltzmann 方程式へ適用すると,  \\[\t\\left(\\frac{\\partial}{\\partial t} \u0026#43; \\dot{\\bm{x}}\\cdot\\frac{\\partial}{\\partial\\bm{x}} \\right)f_p(\\bm{p}) = c n_m \\int \\left|\\frac{d\\bm{\\sigma}_{pm}}{d\\bm{\\omega}}\\right|\\left[f_p(\\bm{p}\u0026#39;) - f_p(\\bm{p})\\right]d\\bm{\\omega}\\]  となります. ここで, 媒質の粒子密度を \\(n_m = \\int f_m(\\bm{p}_*)d\\bm{p}_*\\) と書きました.\nいろいろと仮定を入れて方程式のかたちが変わってきたので, 先に進む前に, いったん記号を整理します.\n放射輝度 #   微分散乱断面積 で導入した方向 \\(\\bm{i}\\) と \\(\\bm{o}\\) を使って, 運動量 \\(\\bm{p}\\) と \\(\\bm{p}'\\) を  \\[\t\\bm{p}=|\\bm{p}|\\bm{o},\\quad \\bm{p}\u0026#39;=|\\bm{p}\u0026#39;|\\bm{i}\\]  と書き直します. これに伴い, 密度関数 \\(f_p(\\bm{x},\\bm{p},t)\\) の引数は \\(f_p(\\bm{x},\\bm{o},|\\bm{p}|,t)\\) となります.\n 以前に言及したように, いま光の粒子はエネルギー \\(h\\nu\\) をもつ 光子であるとしています. そこで, Einstein - de Broglie の関係式 \\(|\\bm{p}|=\\frac{h\\nu}{c}\\) を用いて, 密度関数 \\(f_p(\\bm{x},\\bm{o},|\\bm{p}|,t)\\) の引数を \\(f_p(\\bm{x},\\bm{o},\\nu,t)\\) と書き直します.\nさらに, 放射輝度 \\(L(\\bm{x},\\bm{\\omega},\\nu,t)\\) とのあいだに  \\[\tL(\\bm{x},\\bm{\\omega},\\nu,t) = \\frac{2h\\nu^3}{c^2}f_p(\\bm{x},\\bm{\\omega},\\nu,t) \\quad[\\text{W}\\,\\text{m}^{-2}\\,\\text{sr}^{-1}\\,\\text{Hz}^{-1}]\\]  という関係がある [ 藤田 1990] ことから, 以降は光の密度関数 \\(f_p\\) の代わりに放射輝度 \\(L\\) を用いることにします.\n位相関数 #  微分散乱断面積を散乱断面積 \\(\\sigma\\) で規格化したものを, 位相関数 \\(p(\\bm{i},\\bm{o})\\) と定義します.  \\[\tp(\\bm{i},\\bm{o}) := \\frac{1}{\\sigma}\\left|\\frac{d\\bm{\\sigma}}{d\\bm{\\omega}_i}\\right| \\quad[\\text{sr}^{-1}]\\]  微分散乱断面積 の定義から, 位相関数は 1 に規格化されています.  \\[\t\\int p(\\bm{i},\\bm{o}) d\\bm{\\omega}_i = 1\\]  散乱係数 #  粒子数密度 \\(n\\,[\\text{m}^{-3}]\\) と散乱断面積 \\(\\sigma\\,[\\text{m}^2]\\) を使って, 散乱係数 \\(\\mu\\) を  \\[\t\\mu:=n\\sigma \\qquad[\\text{m}^{-1}]\\]  と定義しておきます.\n光と媒質の Boltzmann 方程式 #  さいごに, 積分 \\(\\int d\\bm{\\omega}\\) が, 方向 \\(\\bm{o}\\) を軸として, 方向 \\(\\bm{i}\\) をぐるっと回すことを表すことを強調するために, \\(\\bm{o}\\) と \\(\\bm{i}\\) のなす角を \\(\\theta_i,\\,\\varphi_i\\), 微小立体角を \\(d\\bm{\\omega}_i = \\sin\\theta_id\\theta_id\\varphi_i\\) と書き直しておきます.\n以上で導入した 放射輝度 と 位相関数 を使うと, さきほどの Boltzmann 方程式は,  \\[\t\\frac{\\partial L(\\bm{o})}{\\partial t} \u0026#43; c\\frac{\\partial L(\\bm{o})}{\\partial\\bm{x}}\\cdot\\bm{o} = c n_m \\sigma_{pm} \\int p(\\bm{i},\\bm{o}) L(\\bm{i}) d\\bm{\\omega}_i - c n_m \\sigma_{pm} L(\\bm{o})\\]  となります. 両辺を整理し, 散乱係数 を使うと  \\[\t\\left(\\frac{1}{c}\\frac{\\partial}{\\partial t} \u0026#43; \\bm{o}\\cdot\\frac{\\partial}{\\partial\\bm{x}} \u0026#43; \\mu_s\\right)L(\\bm{o}) = \\mu_s\\int p(\\bm{i},\\bm{o}) L(\\bm{i}) d\\bm{\\omega}_i\\]  となります. ここで, 放射輝度 \\(L(\\bm{x},\\bm{\\omega}, \\nu, t)\\) を \\(L(\\bm{\\omega})\\) と略記しました.\nこれで, 媒質へ衝突しながら進む, 光の密度分布を表現する方程式が得られました.\nRadiative Transfer #  局所熱平衡 #  Chandrasekhar は, 恒星大気内で局所的に熱平衡にある領域に対して, 媒質が吸収した光 \\(\\mu_a(\\bm{x},\\nu) L(\\bm{x},\\bm{o},\\nu,t)\\) は黒体輻射 \\(B(\\nu,T)\\) で放出されるとしました [ Chandrasekhar 1960].  \\[\t\\int \\mu_a(\\bm{x},\\nu) L(\\bm{x},\\bm{o},\\nu,t) d\\nu = \\int \\mu_a(\\bm{x},\\nu) B(\\nu, T) d\\nu\\]  ここで, 媒質が光を吸収することを表現するために, 散乱係数 \\(\\mu_s\\) に加えて吸収係数 \\(\\mu_a\\) を導入しました.\nRadiative Transfer 方程式 #   局所熱平衡 を考慮して, 媒質による光の吸収 \\(\\mu_aL\\) と, 黒体輻射による放出 \\(\\mu_aB\\) を先ほどの Boltzmann 方程式へ 導入すると,  \\[\t\\left(\\frac{1}{c}\\frac{\\partial}{\\partial t} \u0026#43; \\bm{o}\\cdot\\frac{\\partial}{\\partial\\bm{x}} \u0026#43; \\mu_t\\right)L(\\bm{o}) = \\mu_aB \u0026#43; \\mu_s\\int p(\\bm{i},\\bm{o}) L(\\bm{i}) d\\bm{\\omega}_i\\]  となります. ここで全消散係数 \\(\\mu_t = \\mu_a + \\mu_s\\) を導入しました.\nこの式は Radiative Transfer 方程式と呼ばれています [ Chandrasekhar 1960; Arvo 1993].\nこの節のまとめ #  この節では, 光と散乱媒質の Boltzmann 方程式 へ, 光が媒質に比べてとても小さく速いという仮定とともに, 局所熱平衡 を取り入れることで, Radiative Transfer 方程式 を導きました.\nRendering 方程式 #  Volume Rendering 方程式 #   Radiative Transfer方程式 に対して, 人間の感覚に合わせた近似や調整を行います.\nまず, 人間にとって光は一瞬で伝わるものと考え, 放射輝度の時間依存性を落として \\(L_\\text{re}(\\bm{x},\\bm{\\omega},\\nu,t)\\rightarrow L_\\text{re}(\\bm{x},\\bm{\\omega},\\nu)\\) とします. そして, 媒質が吸収した光の再放射は黒体輻射に限らないとして, 黒体輻射 \\(B(\\nu,T)\\) を一般の再放射 \\(L_\\text{re}(\\bm{x},\\bm{\\omega},\\nu)\\) で書き換えます.\nこれらを Radiative Transfer 方程式へ適用することで  \\[\t\\left(\\bm{o}\\cdot\\frac{\\partial}{\\partial\\bm{x}} \u0026#43; \\mu_t\\right)L(\\bm{o}) = \\mu_aL_\\text{re}(\\bm{o}) \u0026#43; \\mu_s\\int_{S^2} p(\\bm{i},\\bm{o}) L(\\bm{i}) d\\bm{\\omega}_i\\]  が得られます. ここで, 放射輝度 \\(L(\\bm{x},\\bm{\\omega},\\nu)\\) を \\(L(\\bm{\\omega})\\) とするなど, 方向成分以外の引数を略して書きました. この記事では, この式を Volume Rendering 方程式と呼びます.\nRendering 方程式 #  Volume Rendering 方程式は, 位置 \\(\\bm{x}\\) に関する微分方程式なので, これを解くには空間的な境界条件が必要になります.\nそこで境界条件として, Volume Rendering 方程式から \\(\\bm{o}\\cdot\\frac{\\partial L}{\\partial\\bm{x}}\\) を落とすことで, 衝突率 100% の表面を用意します.  \\[\t\\mu_tL(\\bm{o}) = \\mu_aL_\\text{re}(\\bm{o}) \u0026#43; \\mu_s\\int_{H^\u0026#43;} f_r(\\bm{i},\\bm{o})(\\bm{i}\\cdot\\bm{n}) L(\\bm{i}) d\\bm{\\omega}_i\\]  なお, 表面の法線を \\(\\bm{n}\\) とし, \\(\\bm{i}\\cdot\\bm{n}\u0026gt;0\\) である半球面を \\(H^+\\) と書きました. また位相関数 \\(p(\\bm{i},\\bm{o})\\) の代わりに導入した \\(f_r(\\bm{i},\\bm{o})(\\bm{i}\\cdot\\bm{n})\\) については, すぐ後で説明します.\nここで反射率 \\(k_r:=\\frac{\\mu_s}{\\mu_t}\\), 吸収率 \\(k_a:=\\frac{\\mu_a}{\\mu_t}\\) という量を導入すれば,  \\[\tL(\\bm{o}) = k_aL_\\text{re}(\\bm{o}) \u0026#43; k_r\\int_{H^\u0026#43;} f_r(\\bm{i},\\bm{o})(\\bm{i}\\cdot\\bm{n}) L(\\bm{i}) d\\bm{\\omega}_i\\]  となります. なお, 散乱係数のあいだの関係 \\(\\mu_t=\\mu_a+\\mu_s\\) から, 反射率と吸収率のあいだには \\(k_r + k_s = 1\\) という関係があります.\n上式の \\(k_aL_\\text{re}(\\bm{o})\\) を自己発光 \\(L_\\epsilon\\) に差し替えると, Kajiya の Rendering 方程式 [ Kajiya 1986] と同じものが得られることから, この記事では上式を Rendering 方程式と呼びます.\nBidirectional Reflectance Distribution Function (BRDF) #    Fig. \\(d\\bm{\\sigma}_r\\) と \\(d\\bm{\\omega}_i\\)\n   法線 \\(\\bm{n}\\) を持つ表面の微小面積を \\(d\\bm{\\sigma}_n\\) としたとき, それを方向 \\(\\bm{i}\\) へ射影した面積は \\((\\bm{i}\\cdot\\bm{n})d\\bm{\\sigma}_n\\) です. これを表面の上半球面 \\(H_n^+\\) で集めたものを, 散乱断面積 \\(\\sigma_r\\) とします.  \\[\t\\sigma_r = \\int_{H_n^\u0026#43;}(\\bm{i}\\cdot\\bm{n})d\\bm{\\sigma}_n \\qquad[\\text{m}^2]\\]  そして, 微分散乱断面積 で行った議論と同様にして, 単位立体角当たりの面積分布 \\(\\left|\\frac{d\\bm{\\sigma}_n}{d\\bm{\\omega}_i}\\right|\\) を導入します.  \\[\t\\sigma_r = \\int_{H_n^\u0026#43;}\\left|\\frac{d\\bm{\\sigma}_n}{d\\bm{\\omega}_i}\\right|(\\bm{i}\\cdot\\bm{n})d\\bm{\\omega}_i \\qquad[\\text{m}^2]\\]  このとき, 面積分布 \\(\\left|\\frac{d\\bm{\\sigma}_n}{d\\bm{\\omega}_i}\\right|\\) を散乱断面積 \\(\\sigma_r\\) で規格化した量 \\(f_r(\\bm{i},\\bm{o})\\) を BRDF と呼びます.  \\[\tf_r(\\bm{i},\\bm{o}):=\\frac{1}{\\sigma_r}\\left|\\frac{d\\bm{\\sigma}_r}{d\\bm{\\omega}_i}\\right| \\qquad[\\text{sr}^{-1}]\\]  なお, 方向 \\(\\bm{o}\\) に対して法線 \\(\\bm{n}\\) が傾いている場合, 散乱断面積は \\((\\bm{o}\\cdot\\bm{n})\\sigma_r\\) となります.\n  Fig. \\((\\bm{o}\\cdot\\bm{n})\\sigma_r\\)\n   Microfacet モデル #  この節では, 粗い面を表現する BRDF である Microfacet BRDF を作ります. 作り方は [ Walter et al. 2007; Heitz 2014] と同様ですが, 微分散乱断面積に焦点を当てて話を進めます.\nこれまで考えていた, 法線 \\(\\bm{n}\\) をもつ表面を macrosurface と呼び, その上の微細なデコボコを microsurface と呼びます そして, microsurface は完全鏡面で出来ているとします.\n  Fig. Macrosurface 上の法線 \\(\\bm{n}\\) と, microsurface 上の法線 \\(\\bm{m}\\)\n   ハーフベクトル #  方向 \\(\\bm{i}\\) と方向 \\(\\bm{o}\\) を2分割する方向を, ハーフベクトル \\(\\bm{h}\\) と呼びます.  \\[\t\\bm{h}:=\\frac{\\bm{i}\u0026#43;\\bm{o}}{|\\bm{i}\u0026#43;\\bm{o}|}\\]  完全鏡面の上では, その法線 \\(\\bm{m}\\) とハーフベクトル \\(\\bm{h}\\) は一致します.\n  Fig. ハーフベクトル\n   そのため以後は, microsurface 上の法線を \\(\\bm{m}\\) の代わりに \\(\\bm{h}\\) と表記します.\n法線分布関数 #    Fig. \\(d\\bm{\\sigma}_h,\\,d\\bm{\\omega}_h\\)\n    BRDF と同様にして, microsurface 上の微小面積 \\(d\\bm{\\sigma}_h\\) を考えます. これを方向 \\(\\bm{i}\\) へ射影した面積 \\((\\bm{i}\\cdot\\bm{h})d\\bm{\\sigma}_h\\) を microsurface 上の半球面 \\(H_h^+\\) で集めたものを, 散乱断面積 \\(\\sigma_r\\) とします.\n \\[\t\\sigma_r = \\int_{H_h^\u0026#43;}(\\bm{i}\\cdot\\bm{h})d\\bm{\\sigma}_h \\qquad[\\text{m}^2]\\]  続いて, ハーフベクトルを使った微小立体角を \\(d\\bm{\\omega}_h:=\\sin\\theta_hd\\theta_hd\\varphi_h\\) と書き, 単位立体角当たりの面積分布 \\(\\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right|\\) を  \\[\t\\sigma_r = \\int_{H_h^\u0026#43;}\\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right|(\\bm{i}\\cdot\\bm{h})d\\bm{\\omega}_h \\qquad[\\text{m}^2]\\]  と導入します.\nこのとき, 面積分布 \\(\\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right|\\) を散乱断面積 \\(\\sigma_r\\) で規格化した量 \\(D(\\bm{h})\\) を法線分布関数と呼びます.  \\[\tD(\\bm{h}):=\\frac{1}{\\sigma_r}\\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right| \\qquad[\\text{sr}^{-1}]\\]  ところで, BRDF では, 方向 \\(\\bm{o}\\) に対して macrosurface が傾いている場合に, 散乱断面積が \\((\\bm{o}\\cdot\\bm{n})\\sigma_r\\) となるとしました.\n  Fig. \\((\\bm{o}\\cdot\\bm{n})\\sigma_r\\)\n   しかし, いまは明示的にデコボコした microsurface を考えているため, 隣接した microsurface からの遮蔽を考慮することが必要です. Masking 関数 #  Microsurface の可視面積を議論するため, \\(\\bm{i}\\) か \\(\\bm{o}\\) のいずれかを表す方向を \\(\\bm{\\omega}\\) と書きます.\n  Fig. Masking 関数 \\(G_1\\)\n   方向 \\(\\bm{\\omega}\\) へ射影した微小面積 \\((\\bm{i}\\cdot\\bm{h})d\\bm{\\sigma}_h\\) を 集めるとき, Microsurfaceの表側がどれくらいあるかが記述された関数 \\(G_1\\) があったとして,  \\[\\begin{aligned} (\\bm{\\omega}\\cdot\\bm{n})\\sigma_r \u0026amp;= \\int_{H_h^\u0026#43;}G_1(\\bm{\\omega},\\bm{h}) (\\bm{\\omega}\\cdot\\bm{h})d\\bm{\\sigma}_h\\\\ \u0026amp;= \\int_{H_h^\u0026#43;}G_1(\\bm{\\omega},\\bm{h}) \\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right|(\\bm{\\omega}\\cdot\\bm{h})d\\bm{\\omega}_h \\end{aligned}\\]  と求まるとします. この関数 \\(G_1\\) は, Smith masking 関数として知られています. 詳細は [ Smith 1967; Walter et al. 2007; Heitz 2014] を参照してください4.\nShadowing-Masking 関数 #  隣接する microsurface のによる遮蔽は, 方向 \\(\\bm{i}\\) と \\(\\bm{o}\\) の両者に対して考える必要があります. ここでも詳細は [ Heitz 2014] に任せて, そのような遮蔽が考慮された関数 \\(G_2\\) があるとします.\nこの場合, 方向 \\(\\bm{i}\\) から入射した光が, microsurface 上の 1 回反射で方向 \\(\\bm{o}\\) へ向かわない領域が生じます.\n  Fig. Shadowing-masking 関数の可視範囲\n   そこで, 両者の遮蔽を考慮した場合の可視部分を \\(\\sigma_r^\\text{single}\\), それ以外を \\(\\sigma_r^\\text{multi}\\) と呼び分けておきます.  \\[\t\\sigma_r = \\sigma_r^\\text{single} \u0026#43; \\sigma_r^\\text{multi}\\]  そうすると, \\(\\sigma_r^\\text{single}\\) は Shadowing-masking 関数 \\(G_2\\) を使って  \\[\t(\\bm{o}\\cdot\\bm{n})\\sigma_r^\\text{single} = \\int_{H_h^\u0026#43;}G_2(\\bm{i},\\bm{o},\\bm{h}) \\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right|(\\bm{i}\\cdot\\bm{h})d\\bm{\\omega}_h\\]  と書けます.\nFresnel の式 #  光が屈折率の異なる媒質同士の境界を通過するとき, 反射と屈折が起きます.\n  Fig. 入射光 \\(\\bm{i}\\) と 反射光 \\(\\bm{o}\\), 屈折光 \\(\\bm{t}\\)\n   反射と屈折がどのように起こるかは Fresnel の式 によって記述されます. その詳細や 近似式 は参考文献 [ Born and Wolf 1999] [ Schlick 1994] を参照してください.\nこの記事では, 入射光が反射光と屈折光に分かれることを, 全断面積 \\(\\sigma_t\\), 反射断面積 \\(\\sigma_r\\), 吸収断面積 \\(\\sigma_a\\) を使って  \\[\t\\sigma_t = \\sigma_r \u0026#43; \\sigma_a \\qquad[\\text{m}^2]\\]  と使って表すことにします.\nそして, その反射成分の割合を表す Fresnel 反射率を \\(F(\\bm{i},\\bm{h})\\) と書きます.\nMicrofacet BRDF #  以上の結果を使って, Microfacet BRDF を導きます.\n Shadowing-Masking 関数と Fresnel の式 で, 入射光が単一反射と屈折, そして多重反射に分かれることを  \\[\t\\sigma_t = \\sigma_r^{\\text{single}} \u0026#43; \\sigma_r^{\\text{multi}} \u0026#43; \\sigma_a\\]  と表現しました. そして, 単一反射は  \\[\t\\sigma_r^{\\text{single}} = \\int_{H^\u0026#43;_h}\\frac{F(\\bm{i},\\bm{h})G_2(\\bm{i},\\bm{o},\\bm{h})}{(\\bm{o}\\cdot\\bm{n})} \\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right|(\\bm{i}\\cdot\\bm{h})d\\bm{\\omega}_h\\]  と求まります.\n\\(d\\bm{\\omega}_h=\\frac{1}{4(\\bm{i}\\cdot\\bm{h})}d\\bm{\\omega}_i\\) を使って, \\(d\\bm{\\omega}_h\\) を \\(d\\bm{\\omega}_i\\) へ変数変換すれば  \\[\t\\sigma_r^\\text{single} = \\int_{H^\u0026#43;_n}\\frac{F(\\bm{i},\\bm{h})G_2(\\bm{i},\\bm{o},\\bm{h})}{4(\\bm{o}\\cdot\\bm{n})(\\bm{i}\\cdot\\bm{n})} \\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right|(\\bm{i}\\cdot\\bm{n})d\\bm{\\omega}_i\\]  となり, これを BRDF の微分散乱断面積  \\[\t\\sigma_r = \\int_{H_n^\u0026#43;}\\left|\\frac{d\\bm{\\sigma}_n}{d\\bm{\\omega}_i}\\right|(\\bm{i}\\cdot\\bm{n})d\\bm{\\omega}_i\\]  と見比べると, 単一反射について  \\[\t\\left|\\frac{d\\bm{\\sigma}_n}{d\\bm{\\omega}_i}\\right| = \\frac{F(\\bm{i},\\bm{h})G_2(\\bm{i},\\bm{o},\\bm{h})}{4(\\bm{o}\\cdot\\bm{n})(\\bm{i}\\cdot\\bm{n})} \\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right|\\]  という関係が得られます.\nこれにより, 単一反射を表す Microfacet モデルの BRDF は [ Walter et al. 2007; Heitz 2014] と同様に  \\[\tf_r(\\bm{i},\\bm{o}) = \\frac{F(\\bm{i},\\bm{h})G_2(\\bm{i},\\bm{o},\\bm{h})D(\\bm{h})}{4(\\bm{o}\\cdot\\bm{n})(\\bm{i}\\cdot\\bm{n})}\\]  と求まりました.\nこの節のまとめ #  [ Arvo 1993] と同様に, Radiative Transfer 方程式 で時間変化を無視できるとして Volume Rendering 方程式 を導き, その境界条件として Rendering 方程式 を考えました.\nそして [ Walter et al. 2007; Heitz 2014] と同様にして Microfacet BRDF を導きました.\nGGX 法線分布関数 #  前節で Microfacet BRDF を導きました. BRDF は微分散乱断面積で書いたので, 散乱理論の手法を応用できます.\nこの節では, その一例として 衝突パラメータ を用いた GGX 法線分布関数 [ Trowbridge and Reitz. 1975; Walter et al. 2007] の導出を行います.\n衝突パラメータ #  はじめに, 衝突パラメータを用いた微分散乱断面積の表現方法をおさらいします [ Landau and Lifshitz 1976; 砂川 1977].\nいま, microfacet が回転対称な形状をしているとして, その中心軸からの距離を衝突パラメータ \\(b\\) と呼びます.\n  Fig. 衝突パラメータ― \\(b\\)\n   このとき, 微小散乱断面積 \\(d\\bm{\\sigma}_r\\) と \\(b\\) の関係は.  \\[\td\\bm{\\sigma}_r = bdbd\\varphi_h\\]  となります.\nここで衝突パラメータ \\(b\\) が \\(\\theta_h\\) の関数であるとすれば,  \\[\td\\bm{\\sigma}_r = \\left|\\frac{db}{d\\sigma_h}\\right|d\\theta_hd\\varphi_h = \\frac{1}{\\sin\\theta_h}\\left|\\frac{db}{d\\theta_h}\\right|d\\bm{\\omega}_h\\]  と書き換えることができます. 最後の等号で, \\(d\\bm{\\omega}_h=\\sin\\theta_hd\\theta_hd\\varphi_h\\) を使いました.\n従って, 衝突パラメータ \\(b\\) を使って微分散乱断面積を  \\[\t\\left|\\frac{d\\bm{\\sigma}_r}{d\\bm{\\omega}_h}\\right| = \\frac{1}{\\sin\\theta_h}\\left|\\frac{db}{d\\theta_h}\\right|\\]  と書くことができます.\n衝突パラメータによる法線分布関数の表現 #  前節の 衝突パラメータ を使って, 法線分布関数 を表現します.\n  Fig. \\(d\\bm{\\sigma}_r = \\cos\\theta_h d\\bm{\\sigma_h}\\)\n   微小散乱断面積 \\(d\\bm{\\sigma}_r\\) と microfacet 上の微小面積 \\(d\\bm{\\sigma}_h\\) のあいだの関係,  \\[\td\\bm{\\sigma}_r = \\cos\\theta_h d\\bm{\\sigma}_h\\]  を, 前節で求めた微分散乱断面積へ用いると, 単位立体角当たりの面積分布が  \\[\t\\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right| = \\frac{1}{\\cos\\theta_h}\\frac{1}{\\sin\\theta_h}\\left|\\frac{db}{d\\theta_h}\\right|\\]  と求まります.\n 法線分布関数の定義は,  \\[\tD(\\bm{h}):=\\frac{1}{\\sigma_r}\\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right| \\qquad[\\text{sr}^{-1}]\\]  としたので, 次は衝突パラメータ \\(b\\) で具体的な形状を表現することが必要です.\nGGX 法線分布関数の導出 #    Fig. \\(\\frac{dz}{db} = \\tan\\theta_h\\)\n   いま, microfacet の形状が \\(z(b)\\) なる関数で書けて, ハーフベクトルと  \\[\t\\frac{dz}{db} = \\tan\\theta_h\\]  という関係にあるとします[ Trowbridge and Reitz. 1975].\n回転楕円体 #  \\(z(b)\\) が表す形状として, [ Trowbridge and Reitz. 1975] と同様に, 回転楕円体 を考えます.\n長半径が \\(1\\), 短半径が \\(\\alpha\\) の回転楕円体は  \\[\tx^2 \u0026#43; y^2 \u0026#43; \\frac{z^2}{\\alpha^2} = 1\\]  です.\nこの式を  \\[\tz = \\alpha\\sqrt{1-x^2-y^2}\\]  と変形し, 衝突パラメータ \\(b\\) を使って  \\[\tb^2 = x^2 \u0026#43; y^2\\]  とすれば,  \\[\tz(b) = \\alpha\\sqrt{1-b^2}\\]  と書き直せます.\nGGXモデルの導出 #  \\(z(b)\\) と \\(\\theta_h\\) の関係 \\(\\frac{dz}{db} = \\tan\\theta_h\\) を 回転楕円体へ適用すれば, 衝突パラメータ \\(b\\) が \\(\\theta_h\\) の関数として  \\[\tb^2 = \\frac{\\tan^2\\theta_h}{\\alpha^2 \u0026#43; \\tan\\theta_h}\\]  と求まります.\nこれを使い, 単位立体角当たりの面積分布を求めると  \\[\t\\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right| = \\frac{1}{\\cos\\theta_h}\\frac{1}{\\sin\\theta_h}\\left|\\frac{db}{d\\theta_h}\\right| = \\frac{\\alpha^2}{\\cos^4\\theta_h(\\alpha\u0026#43;\\tan^2\\theta_h)^2}\\]  となります.\n従って散乱断面積は  \\[\\begin{aligned} \\sigma_r \u0026amp;= \\int_{H_h^\u0026#43;}\\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right|\\cos\\theta_hd\\bm{\\omega}_h\\\\ \u0026amp;= \\int^{2\\pi}_0d\\varphi_h\\int^{\\frac{\\pi}{2}}_0 \\frac{\\alpha^2}{\\cos^4\\theta_h(\\alpha^2\u0026#43;\\tan^2\\theta_h)^2}\\cos\\theta_h\\sin\\theta_hd\\theta_h\\\\ \u0026amp;= \\pi \\end{aligned}\\]  となり, 法線分布関数は  \\[\tD(\\bm{h}) = \\frac{1}{\\sigma_r}\\left|\\frac{d\\bm{\\sigma}_h}{d\\bm{\\omega}_h}\\right| = \\frac{\\alpha^2}{\\pi\\cos^4\\theta_h(\\alpha\u0026#43;\\tan^2\\theta_h)^2}\\]  と求まります.\n以上で GGX 法線分布関数 [ Trowbridge and Reitz. 1975; Walter et al. 2007] が求まりました.\nこの節のまとめ #  この節では, はじめに 法線分布関数 と 衝突パラメータ の関係を作りました.\nそして, 回転楕円体 を衝突パラメータで表現することで, GGX 法線分布関数 を求めました.\nまとめ #  この記事では, 主に [ Cercignani 1988] [ Arvo 1993] を参考にして Boltzmann 方程式 から Radiative Transfer 方程式 を導き, そこから Volume Rendering 方程式 と Rendering 方程式 を導きました.\n次に [ Heitz 2014] を参考にして Microfacet BRDF を導きました. この際, 光と媒質の衝突部分を一貫して 微分散乱断面積 を用いて記述することで, 何らかの幾何形状から Microfacet BRDF を求められるようにしました.\n最後に, Microfacet BRDF を求める例のひとつとして, 散乱理論 [ 砂川 1977] で知られている 衝突パラメータ を使って, 回転楕円体 から GGX 法線分布関数 を求める例を紹介しました.\n参考文献 #  Lorentz, H. A. 1905. The motion of electrons in metallic bodies i. In KNAW, proceedings. Vol. 7, pp. 438-453. #  Chandrasekhar, S. 1960. Radiative transfer. Dover Publications Inc. #  Smith, B. G. 1967. Geometrical shadowing of a random rough surface. IEEE Trans. on Antennas and Propagation, pp. 668–671. #  Trowbridge, T. S. and Reitz, K. P. 1975. Average irregularity representation of a rough surface for ray reflection. J. Opt. Soc. Am., 65(5):531–536. #  Landau, L. D. and Lifshitz, E. M. 1976. Mechanics. Vol. 1 (3rd ed.). Butterworth-Heinemann. #  砂川, 重信. 1977. 散乱の量子論. 岩波書店. #  Cook, R. L. and Torrance, K. E. 1982. A reﬂectance model for computer graphics. ACM Trans. Graph., 1(1):7–24. #  Kajiya, J. T. 1986. The rendering equation. SIGGRAPH Comput. Graph., 20(4):143–150. #  Cercignani, C. 1988. The Boltzmann Equation and Its Applications. Springer-Verlaq. #  藤田, 重次. 原, 啓明, et al. 共訳. 1989. 統計熱物理学. 裳華房. #  藤田, 重次. 原, 啓明, et al. 共訳. 1990. 量子統計物理学. 裳華房. #  Arvo, J. 1993. Transfer equations in global illumination. SIGGRAPH’93 Course Notes. #  Schlick, C. 1994. An inexpensive BRDF model for physically‐based rendering. In Computer graphics forum, vol. 13, no. 3, pp. 233-246. #  Born, M and Wolf, E. 1999. Principles of Optics (7th ed.). Cambridge University Press. #  Kardar, M. 2007. Statistical Physics of Particles. Cambridge University Press. #  Walter, B., et al. 2007. Microfacet Models for Refraction through Rough Surfaces. In Proceedings of the 18th Eurographics Conference on Rendering Techniques, EGSR’07, pp. 195–206. #  Heitz, E. 2014. Understanding the masking-shadowing function in microfacet-based BRDFs. Journal of Computer Graphics Techniques (JCGT), 3(2):48–107 #    これは, 相空間での1体分布関数です. 分布関数という名前はこの記事内で多数登場するため, 密度関数と言い換えました. \u0026#x21a9;\u0026#xfe0e;\n このことは, Liouvilleの定理 の帰結として導かれます. \u0026#x21a9;\u0026#xfe0e;\n 角度をこのようにあらわすのは, 後の話と整合性をとるためです. \u0026#x21a9;\u0026#xfe0e;\n Masking 関数は, Smith masking 関数のほかに V-cavity などがあります [ Heitz 2014]. この記事では, microsurface に明示的な幾何形状を想定しているため, 法線分布関数から一意に求まる Smith masking 関数のみを紹介しました. \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':3,'href':'/posts/20201021_setup/','title':"ウェブサイトのセットアップ",'section':"Blog",'content':"このウェブサイトは、 https://themes.gohugo.io/theme/hugo-book/ を元に作った。 そのときの備忘録をこの記事に残しておく。\nインストール #   https://github.com/spf13/hugo/releases から実行ファイルを取得  手元の環境は Windows 10 64bit なので、hugo_0.76.5_Windows-64bit を選択   hugo.exe を適当なディレクトリに置き、パスを通す  サイトの作成 #   サイトを作る hugo new site [サイト名]  作成したサイトのディレクトリで git init して、そこを Git のリポジトリにする  テーマの適用 #   https://themes.gohugo.io/hugo-book/ を適用する git submodule add https://github.com/alex-shpak/hugo-book themes/book  https://github.com/alex-shpak/hugo-book にある説明を見て記事を作成  サイトのプレビューと生成 #   プレビュー hugo server  public ディレクトリにサイトを生成 hugo   生成されたサイトを GitHub Pages として公開 #   GitHub Pages用のリポジトリを作成  GitHub へアクセスし、[ユーザー名].github.io という名前のリポジトリを公開設定で作成   submodule として, public ディレクトリを 1. で作成したリポジトリに割り当てる git submodule add -b main https://github.com/[ユーザー名]/[ユーザー名].github.io public  public ディレクトリへ移動し, その中身を git push git push origin main  https://[ユーザー名].github.io/ に記事が公開される  "});})();